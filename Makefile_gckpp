#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: Set here the F90 compiler and options
#       Pedefined compilers: INTEL, PGF, HPUX, LAHEY
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Pick a default compiler if not supplied
ifndef COMPILER
#COMPILER = LAHEY
#COMPILER = INTEL
#COMPILER = PGF
#COMPILER = HPUX
COMPILER = GFORTRAN
endif

FC_LAHEY   = lf95
# More aggressive for production runs:
#FOPT_LAHEY = -Cpp --pca -O
# More checking for debugging:
FOPT_LAHEY = -Cpp --chk a,e,s,u --pca --ap -O0 -g --trap --trace --chkglobal

FC_INTEL   = ifort
# More aggressive for production runs:
#FOPT_INTEL = -cpp -O -fp-model precise -pc80 -prec_div
# More checking for debugging:
FOPT_INTEL = -cpp -O0 -fp-model strict -implicitnone -ftrapuv \
              -debug all -check all -warn all -g

FC_PGF     = pgf90
# More aggressive for production runs:
FOPT_PGF   = -Mpreprocess -O -fast -pc 80 -Kieee
# More checking for debugging:
#FOPT_PGF   = -Mpreprocess -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk \
#             -Ktrap=fp -pc 80 -Kieee

FC_HPUX    = f90
FOPT_HPUX  = -O -u +Oall +check=on

FC_GFORTRAN     = gfortran
FOPT_GFORTRAN   = -cpp -O -g

# define FULL_ALGEBRA for non-sparse integration
FC   = $(FC_$(COMPILER))
FOPT = $(FOPT_$(COMPILER)) # -DFULL_ALGEBRA

LIBS =
#LIBS = -llapack -lblas

#############################################################################
# Test if various files are found on disk or not
# so that we can include/exclude them from the Make process
#############################################################################

# JacobianSP
HAS_JAC_SP =0
ifeq ($(shell test -f gckpp_JacobianSP.F90 && echo y),y)
  HAS_JAC_SP =1
endif

# Jacobian
HAS_JAC = 0
ifeq ($(shell test -f gckpp_Jacobian.F90 && echo y),y)
  HAS_JAC = 1
endif

# HessianSP
HAS_HES_SP = 0
ifeq ($(shell test -f gckpp_HessianSP.F90 && echo y),y)
  HAS_HES_SP = 1
endif

# Hessian
HAS_HES=0
ifeq ($(shell test -f gckpp_Hessian.F90 && echo y),y)
  HAS_HES = 1
endif

# StoichiomSP
HAS_STM_SP = 0
ifeq ($(shell test -f  gckpp_StoichiomSP.F90 && echo y),y)
  HAS_STM_SP=1
endif

# Stoichiom
HAS_STM = 0
ifeq ($(shell test -f  gckpp_Stoichiom.F90 && echo y),y)
  HAS_STM=1
endif

#############################################################################
# Construct lists of objects and sources
#############################################################################

# Command to create Matlab mex gateway routines
# Note: use $(FC) as the mex Fortran compiler
MEX  = mex

GENSRC = gckpp_Precision.F90  gckpp_Parameters.F90 gckpp_Global.F90
GENOBJ = gckpp_Precision.o    gckpp_Parameters.o   gckpp_Global.o

FUNSRC = gckpp_Function.F90
FUNOBJ = gckpp_Function.o

JACSRC   =
JACOBJ   =
JACSPOBJ =
ifeq ($(HAS_JAC_SP),1)
  JACSRC   += gckpp_JacobianSP.F90
  JACOBJ   += gckpp_JacobianSP.o
  JACSPOBJ += gckpp_JacobianSP.o
endif
ifeq ($(HAS_JAC),1)
  JACSRC   += gckpp_Jacobian.F90
  JACOBJ   += gckpp_Jacobian.o
endif

HESSRC   =
HESOBJ   =
HESSPOBJ =
ifeq ($(HAS_HES_SP),1)
  HESSRC   += gckpp_HessianSP.F90
  HESOBJ   += gckpp_HessianSP.o
  HESSPOBJ += gckpp_HessianSP.o
endif
ifeq ($(HAS_HES),1)
  HESSRC   += gckpp_Hessian.F90
  HESOBJ   += gckpp_Hessian.o
endif

STMSRC   =
STMOBJ   =
STMSPOBJ =
ifeq ($(HAS_STM_SP),1)
  STMSRC   += gckpp_StoichiomSP.F90
  STMOBJ   += gckpp_StoichiomSP.o
  STMSPOBJ += gckpp_StoichiomSP.o
endif
ifeq ($(HAS_HES),1)
  HESSRC   += gckpp_Stoichiom.F90
  HESOBJ   += gckpp_Stoichiom.o
endif

UTLSRC = gckpp_Rates.F90 gckpp_Util.F90 gckpp_Monitor.F90
UTLOBJ = gckpp_Rates.o   gckpp_Util.o   gckpp_Monitor.o

LASRC  = gckpp_LinearAlgebra.F90
LAOBJ  = gckpp_LinearAlgebra.o

STOCHSRC = gckpp_Stochastic.F90
STOCHOBJ = gckpp_Stochastic.o

MAINSRC = gckpp_Main.F90       gckpp_Initialize.F90 \
          gckpp_Integrator.F90 gckpp_Model.F90
MAINOBJ = gckpp_Main.o         gckpp_Initialize.o   \
          gckpp_Integrator.o   gckpp_Model.o

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       objects needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALLOBJ = $(GENOBJ) $(FUNOBJ) $(JACOBJ) $(HESOBJ) $(STMOBJ) \
	 $(UTLOBJ) $(LAOBJ)

SIMPLEOBJ = $(GENOBJ) $(FUNOBJ) $(UTLOBJ) $(LAOBJ)

#############################################################################
# Makefile targets and rules
#############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       executables needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
all:    exe

exe:	$(ALLOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(MAINOBJ) $(LIBS) -o gckpp.exe

stochastic:$(ALLOBJ) $(STOCHOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(STOCHOBJ) $(MAINOBJ) $(LIBS) \
	-o gckpp_stochastic.exe

mex:    $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O gckpp_mex_Fun.F90     $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O gckpp_mex_Jac_SP.F90  $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O gckpp_mex_Hessian.F90 $(ALLOBJ)

clean:
	rm -f *.o *.mod \
	gckpp*.dat gckpp.exe gckpp*.mexglx \
	gckpp.log

distclean:
	rm -f *.o *.mod \
	gckpp*.dat gckpp*.exe gckpp.log \
	gckpp_*.f90 gckpp_*.F90 gckpp_*.mexglx \
	results*.m 

gckpp_Precision.o: gckpp_Precision.F90
	$(FC) $(FOPT) -c $<

gckpp_Parameters.o: gckpp_Parameters.F90 gckpp_Precision.o
	$(FC) $(FOPT) -c $<

gckpp_Monitor.o: gckpp_Monitor.F90 gckpp_Precision.o
	$(FC) $(FOPT) -c $<

gckpp_Global.o: gckpp_Global.F90 gckpp_Parameters.o gckpp_Precision.o
	$(FC) $(FOPT) -c $<

gckpp_Initialize.o: gckpp_Initialize.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Function.o: gckpp_Function.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Stochastic.o: gckpp_Stochastic.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_JacobianSP.o: gckpp_JacobianSP.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Jacobian.o: gckpp_Jacobian.F90 $(GENOBJ) $(JACSPOBJ)
	$(FC) $(FOPT) -c $<

gckpp_LinearAlgebra.o: gckpp_LinearAlgebra.F90 $(GENOBJ) $(JACSPOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Rates.o: gckpp_Rates.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_HessianSP.o: gckpp_HessianSP.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Hessian.o:  gckpp_Hessian.F90 $(GENOBJ) $(HESSPOBJ)
	$(FC) $(FOPT) -c $<

gckpp_StoichiomSP.o: gckpp_StoichiomSP.F90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Stoichiom.o: gckpp_Stoichiom.F90 $(GENOBJ) $(STMSPOBJ)
	$(FC) $(FOPT) -c $<

gckpp_Util.o: gckpp_Util.F90 $(GENOBJ) gckpp_Monitor.o
	$(FC) $(FOPT) -c $<

gckpp_Main.o: gckpp_Main.F90 $(ALLOBJ) \
                 gckpp_Initialize.o gckpp_Model.o gckpp_Integrator.o
	$(FC) $(FOPT) -c $<

gckpp_Model.o: gckpp_Model.F90 $(ALLOBJ) gckpp_Integrator.o
	$(FC) $(FOPT) -c $<

gckpp_Integrator.o: gckpp_Integrator.F90 $(ALLOBJ)
	$(FC) $(FOPT) -c $<
